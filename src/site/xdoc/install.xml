<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2012 Hippo.
  
  This file is part of HST PDF Renderer.
  
  HST PDF Renderer is free software: you can redistribute it and/or modify it 
  under the terms of the GNU General Public License as published by the Free 
  Software Foundation, either version 3 of the License, or (at your option) 
  any later version.
  
  HST PDF Renderer is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
  or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License along with
  HST PDF Renderer. If not, see http://www.gnu.org/licenses/.
-->
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN" "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Installation</title>
  </properties>
  <body>
    <section name="HST PDF Renderer">
      <subsection name="Dependencies">
        <p>Add the following dependency to the SITE Application module POM:</p>
        <div class="brush: xml">
        <source><![CDATA[
    <!-- SNIP -->

    <repository>
      <id>hstpdfrenderer-maven-repo</id>
      <name>HST PDF Renderer Maven 2 Repository</name>
      <url>http://forge.onehippo.org/svn/hstpdfrenderer/maven2/</url>
    </repository>

    <!-- SNIP -->

    <dependency>
      <groupId>org.onehippo.forge.hstpdfrenderer</groupId>
      <artifactId>hstpdfrenderer</artifactId>
      <version>${forge.hstpdfrenderer.version}</version>
    </dependency>

    <!-- SNIP -->
        ]]></source>
        </div>
      </subsection>

      <subsection name="Servlet Filter Configuration">
        <p>Add the servlet filter configuration in the web.xml of your web application like the following:</p>
        <p>
          <em>
            Note: The mapping of the servlet filter, 'HtmlPDFRenderingFilter', must be located before the other
                  rendering servlet filters such as 'HstFilter' because 'HtmlPDFRenderingFilter' should capture the
                  rendered HTML output to transform to PDF output.
          </em>
        </p>
        <p>
          In the following example configuration, the HtmlPDFRenderingFilter servlet filter is configured to handle
          all the request paths starting with '/pdf/*'.
          This example assumes you will configure a HST mount named 'pdf' under the HST root mount for convenience.
        </p>
        <div class="brush: xml">
        <source><![CDATA[
  <!-- SNIP -->

  <filter>
    <filter-name>HtmlPDFRenderingFilter</filter-name>
    <filter-class>org.onehippo.forge.hst.pdf.renderer.servlet.HtmlPDFRenderingFilter</filter-class>
    <init-param>
      <param-name>tidy.props</param-name>
      <param-value>/WEB-INF/tidy.properties</param-value>
    </init-param>
    <init-param>
      <param-name>css.uris</param-name>
      <param-value>/WEB-INF/default-pdf-renderer.css</param-value>
    </init-param>
    <!--
    <init-param>
      <param-name>font.paths</param-name>
      <param-value>
        /home/tester/fonts/courier.ttf
        /home/tester/fonts/verdana.ttf
      </param-value>
    </init-param>
    -->
  </filter>

  <!-- SNIP -->

  <filter-mapping>
    <filter-name>HtmlPDFRenderingFilter</filter-name>
    <url-pattern>/pdf/*</url-pattern>
  </filter-mapping>

  <!-- SNIP -->
        ]]></source>
        </div>
        
        <p>
          Here is the detail for all the configurable init parameters of HtmlPDFRenderingFilter:
        </p>
        <table>
          <tr>
            <th>Init Parameter Name</th>
            <th>Description</th>
            <th>Example Value(s)</th>
            <th>Default Value</th>
            <th>Since</th>
          </tr>
          <tr>
            <td>tidy.props</td>
            <td>
              Context relative JTidy configuration properties resource path.
            </td>
            <td>
              <a href="http://forge.onehippo.org/svn/hstpdfrenderer/hstpdfrenderer-demo/trunk/site/src/main/webapp/WEB-INF/tidy.properties" target="_blank">/WEB-INF/tidy.properties</a>
            </td>
            <td>
            </td>
            <td>
              1.01.00
            </td>
          </tr>
          <tr>
            <td>css.uris</td>
            <td>
              CSS file resource paths used when generating PDF output.
              You can specify multiple CSS file resources by separating comma, semicolon, tab or line break.
              Each CSS file resource can be either context relative path (e.g., /WEB-INF/default-pdf-renderer.css)
              or file: URI or relative path from the current working directory.
            </td>
            <td>
              /WEB-INF/default-pdf-renderer.css
            </td>
            <td>
            </td>
            <td>
              0.01.00
            </td>
          </tr>
          <tr>
            <td>font.paths</td>
            <td>
              Font file paths used when embedding fonts into PDF output.
              You can specify multiple Font file paths by separating comma, semicolon, tab or line break.
              Each font file must be absolute file path (e.g., /home/tester/fonts/courier.ttf).
            </td>
            <td>
              /home/tester/fonts/courier.ttf
            </td>
            <td>
            </td>
            <td>
              0.01.00
            </td>
          </tr>
          <tr>
            <td>buffer.size</td>
            <td>
              Byte buffer size used when cleaning up HTML output and transforming HTML output to XHTML output internally.
            </td>
            <td>
              4096
            </td>
            <td>
              4096
            </td>
            <td>
              0.01.00
            </td>
          </tr>
          <tr>
            <td>user.agent.callback.class</td>
            <td>
              The name of a custom class which implements org.xhtmlrenderer.extend.UserAgentCallback.
              If you want to customize the internal callback mechanism for Flying Saucer for some reason
              (e.g., custom image loading), then you can provide the class name of your custom class.
            </td>
            <td>
            </td>
            <td>
            </td>
            <td>
              0.01.00
            </td>
          </tr>
        </table>
      </subsection>

      <subsection name="Example: Add 'pdf' Mount in HST Configuration">
        <p>
          As mentioned above, it is very convenient if you configure a sub mount for automatic PDF generation from the normal HTML rendering
          because the servlet filter configuration and link generations become much easier.
        </p>
        <p>
          So, for example, 'pdf' sub mount can be configured under 'hst:root' mount:
        </p>
        <div class="brush: xml">
        <source><![CDATA[
      <!-- SNIP -->

      <sv:node sv:name="hst:root">
        <sv:property sv:name="jcr:primaryType" sv:type="Name">
          <sv:value>hst:mount</sv:value>
        </sv:property>

        <!-- SNIP -->

        <!-- The following 'pdf' mount configuration is added under 'hst:root' mount configuration. -->
        <sv:node sv:name="pdf">
          <sv:property sv:name="jcr:primaryType" sv:type="Name">
            <sv:value>hst:mount</sv:value>
          </sv:property>
          <sv:property sv:name="hst:alias" sv:type="String">
            <sv:value>pdf</sv:value>
          </sv:property>
        </sv:node>
      </sv:node>

      <!-- SNIP -->
        ]]></source>
        </div>
        <p>
          You can also consider configuring sitemap items for automatic PDF generation URLs, but in that case,
          you will have to configure many more URL patterns for HtmlPDFRenderingFilter and
          it will more difficult or tedious to generate PDF URL links.
        </p>
      </subsection>

      <subsection name="Example: Create a 'pdf' link in your page(s)">
        <p>
          If you configured a pdf rendering mount, then it is very easy to generate PDF rendering links in your templates.
          See the following example:
        </p>
        <div class="brush: xml">
        <source><![CDATA[
    <c:if test="${not empty document}">
      <div id="pdflink">
        <a href='<hst:link mount="pdf" hippobean="${document}"/>'>
          <img src="<hst:link path="/images/pdf.gif"/>" border="0" />
        </a>
      </div>
    </c:if>
        ]]></source>
        </div>
      </subsection>

      <subsection name="Example: Stylesheet(s) for PDF Rendering">
        <p>
          HtmlPDFRenderingFilter uses the configured stylesheet resources when rendering PDF output.
          Here's an example CSS file (You can download this example <a href="https://forge.onehippo.org/svn/hstpdfrenderer/hstpdfrenderer-demo/trunk/site/src/main/webapp/WEB-INF/default-pdf-renderer.css">here</a>.):
        </p>
        <div class="brush: plain">
        <source><![CDATA[
@page { 
  size: letter;
  margin: 0.8in; 
  -fs-flow-top: "header";
  -fs-flow-bottom: "footer";
  -fs-flow-left: "left";
  -fs-flow-right: "right";
  border: thin solid gray;
  padding: 1em;
  @top-left {
    content: "Generated PDF Pages";
  }
  @top-right {
    content: "HST PDF Renderer";
  }
  @bottom-left {
    content: "www.onehippo.org";
  }
  @bottom-right {
    content: "Page " counter(page) "/" counter(pages);
  }
}

#header {
  font: bold serif;
  position: absolute; top: 0; left: 0; 
  -fs-move-to-flow: "header";
}

#footer {
  font-size: 90%; font-style: italic; 
  position: absolute; top: 0; left: 0;
  -fs-move-to-flow: "footer";
}

#pagenumber:before {
  content: counter(page); 
}

#pagecount:before {
  content: counter(pages);  
}

#pagebreakbefore {
  page-break-before: always;
}

#pagebreakafter {
  page-break-after: always;
}

#hd {
  display: none;
}

#leftmenu {
  display: none;
}

#right {
  display: none;
}
        ]]></source>
        </div>
        <p>
          See the <a href="http://flyingsaucerproject.github.com/flyingsaucer/r8/guide/users-guide-R8.html" target="_blank">The Flying Saucer User's Guide</a>
          for detail.
        </p>
      </subsection>

    </section>
    <section name="Demo">
      <p>Check out and build the demo at:
        <a href="https://forge.onehippo.org/svn/hstpdfrenderer/hstpdfrenderer-demo">
          https://forge.onehippo.org/svn/hstpdfrenderer/hstpdfrenderer-demo
        </a>
      </p>
      <p>For example, you can run the demo project as follows:</p>
      <div class="brush: bash">
      <source><![CDATA[
$ svn checkout https://forge.onehippo.org/svn/hstpdfrenderer/hstpdfrenderer-demo/tags/hstpdfrenderer-demo-${forge.hstpdfrenderer.version} hstpdfrenderer-demo
$ cd hstpdfrenderer-demo
$ mvn clean install
$ mvn -P cargo.run
      ]]></source>
      </div>
      <p>
        <em>
          Note: ${forge.hstpdfrenderer.version} should be replaced by the tagged version.
          You can find all the tags under https://forge.onehippo.org/svn/hstpdfrenderer/hstpdfrenderer-demo/tags/.
        </em>
      </p>
      <p>
        Try to click PDF icon button on each detail page in the website, http://localhost:8080/site/.
      </p>
    </section>
  </body>
</document>